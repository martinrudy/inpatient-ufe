/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MrudInpatientWlApp {
        "ambulanceId": string;
        "apiBase": string;
        "basePath": string;
    }
    interface MrudInpatientWlEditor {
        "ambulanceId": string;
        "apiBase": string;
        "entryId": string;
    }
    interface MrudInpatientWlList {
        "ambulanceId": string;
        "apiBase": string;
    }
}
export interface MrudInpatientWlEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMrudInpatientWlEditorElement;
}
export interface MrudInpatientWlListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMrudInpatientWlListElement;
}
declare global {
    interface HTMLMrudInpatientWlAppElement extends Components.MrudInpatientWlApp, HTMLStencilElement {
    }
    var HTMLMrudInpatientWlAppElement: {
        prototype: HTMLMrudInpatientWlAppElement;
        new (): HTMLMrudInpatientWlAppElement;
    };
    interface HTMLMrudInpatientWlEditorElementEventMap {
        "editor-closed": string;
    }
    interface HTMLMrudInpatientWlEditorElement extends Components.MrudInpatientWlEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMrudInpatientWlEditorElementEventMap>(type: K, listener: (this: HTMLMrudInpatientWlEditorElement, ev: MrudInpatientWlEditorCustomEvent<HTMLMrudInpatientWlEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMrudInpatientWlEditorElementEventMap>(type: K, listener: (this: HTMLMrudInpatientWlEditorElement, ev: MrudInpatientWlEditorCustomEvent<HTMLMrudInpatientWlEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMrudInpatientWlEditorElement: {
        prototype: HTMLMrudInpatientWlEditorElement;
        new (): HTMLMrudInpatientWlEditorElement;
    };
    interface HTMLMrudInpatientWlListElementEventMap {
        "entry-clicked": string;
    }
    interface HTMLMrudInpatientWlListElement extends Components.MrudInpatientWlList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMrudInpatientWlListElementEventMap>(type: K, listener: (this: HTMLMrudInpatientWlListElement, ev: MrudInpatientWlListCustomEvent<HTMLMrudInpatientWlListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMrudInpatientWlListElementEventMap>(type: K, listener: (this: HTMLMrudInpatientWlListElement, ev: MrudInpatientWlListCustomEvent<HTMLMrudInpatientWlListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMrudInpatientWlListElement: {
        prototype: HTMLMrudInpatientWlListElement;
        new (): HTMLMrudInpatientWlListElement;
    };
    interface HTMLElementTagNameMap {
        "mrud-inpatient-wl-app": HTMLMrudInpatientWlAppElement;
        "mrud-inpatient-wl-editor": HTMLMrudInpatientWlEditorElement;
        "mrud-inpatient-wl-list": HTMLMrudInpatientWlListElement;
    }
}
declare namespace LocalJSX {
    interface MrudInpatientWlApp {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "basePath"?: string;
    }
    interface MrudInpatientWlEditor {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "entryId"?: string;
        "onEditor-closed"?: (event: MrudInpatientWlEditorCustomEvent<string>) => void;
    }
    interface MrudInpatientWlList {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "onEntry-clicked"?: (event: MrudInpatientWlListCustomEvent<string>) => void;
    }
    interface IntrinsicElements {
        "mrud-inpatient-wl-app": MrudInpatientWlApp;
        "mrud-inpatient-wl-editor": MrudInpatientWlEditor;
        "mrud-inpatient-wl-list": MrudInpatientWlList;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "mrud-inpatient-wl-app": LocalJSX.MrudInpatientWlApp & JSXBase.HTMLAttributes<HTMLMrudInpatientWlAppElement>;
            "mrud-inpatient-wl-editor": LocalJSX.MrudInpatientWlEditor & JSXBase.HTMLAttributes<HTMLMrudInpatientWlEditorElement>;
            "mrud-inpatient-wl-list": LocalJSX.MrudInpatientWlList & JSXBase.HTMLAttributes<HTMLMrudInpatientWlListElement>;
        }
    }
}
